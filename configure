#! /bin/bash

function usage () {
	echo "usage"
	echo "config <dangerTemp> <pollTime> <ouputPin>"
	echo "config <outputPin> (Developer option, only configures GPIO)"
	echo "dangerTemp - The temperature at which if crossed, fan is activated"
	echo "pollTime - the time in seconds to check the pi's temperature"
	echo "outputPin - The pin that is hooked up to the power for the fan"
	
}

#Sets up GPIO only. Used to intit the configure script
function setupGPIO() {
	echo "Setting up GPIO on pin $1..."
	GPIOROOT=/sys/class/gpio
	PINROOT=$GPIOROOT/gpio$1

	## Check if Pin setup
	if [ -d $PINROOT ]; then
		echo "Pin $1 is set up for GPIO"
	else
		echo "Setting up pin $1 for GPIO..."
		echo $1 > /sys/class/gpio/export
		echo "Pin $1 setup for GPIO"
	fi

	#Check Pin Configuration
	cat $PINROOT/direction | egrep -q "out"
	DIRECTIONSET=$?
	if [ $DIRECTIONSET -eq 0 ]; then
		echo "Pin $1 is configured for output"
	else
		echo "Configureing pin $1 as Output"
		sudo sh -c "echo 'out' > $PINROOT/direction"
		echo "Pin $1 is configured for output"
	fi
	return 0

}

#Lets Go
echo "BEGIN PICOOL CONFIG"
if [ $# -eq 1 ]; then
	#Check Params
	egrep -q "^[0-9]*$" <<< $1
	if [ $? -ne 0 ]; then
		usage
		exit 1
	fi
	# Setu GPIO ONLY and exit success?
	setupGPIO $1
	exit $?
elif [ $# -ne 3 ]; then
	usage
	exit 1
fi

#Check Params are what we expect
egrep -q "^[0-9]*$" <<< $1$2$3
if [ $? -ne 0 ]; then
	usage
	exit 1
fi

which landscape-sysinfo > /dev/null 2>&1
LANDSCAPE=$?
which vcgencmd > /dev/null 2>&1
VCGENCMD=$?
READER=""

if [ $LANDSCAPE -eq 0 ]; then
	READER="landscape-sysinfo"
	echo "Using landscape-sysinfo to read temp"
elif [ $VCGENCMD -eq 0 ]; then
	READER="vcgencmd"
	echo "Using landscape-sysinfo to read temp"
else
	echo "******** ERROR!! No tempearture provider found! *********"
	exit 1
fi


# Get Dependancies 
sudo apt update
sudo apt install python3
sudo apt install python3-pip
pip3 install systemd
sudo apt install libsystemd-dev

#Move Template txt to pyCool
TEMPLATEPATH="`pwd`/Cooler"
cp $TEMPLATEPATH/.template.py $TEMPLATEPATH/piCool.py

TEMPLATE=$TEMPLATEPATH/piCool.py

#Preform Replacement
sed -i "s/<DANGERTEMP>/$1/g" $TEMPLATE
sed -i "s/<POLLTIME>/$2/g" $TEMPLATE
sed -i "s/<OUTPUTPIN>/$3/g" $TEMPLATE
sed -i "s/<READER>/\"$READER\"/g" $TEMPLATE

#Setup GPIO
setupGPIO $3

SERVICELOC=/etc/systemd/system

#Check For Service
if [ -f $SERVICELOC/FanService.service ]; then
	echo "Service \"FanService.service\" already exists at $SERVICELOC" 
	sudo systemctl daemon-reload
else
	#GetDir
	SERVICEPATH="`pwd`/Service"

	#Move the Template Service
	cp $SERVICEPATH/.template.service $SERVICEPATH/FanService.service
	echo "Running Script as: $USER"
	SERVICE=$SERVICEPATH/FanService.service
	sed -i "s|<PYPATH>|$TEMPLATE|g" $SERVICE
	sed -i "s|<USER>|$USER|g" $SERVICE
	echo "Creatd Service at: $SERVICE pointing at script: $TEMPLATE"
	echo "Create Service Symlink"
	sudo ln -s $SERVICE /etc/systemd/system
	sudo systemctl enable FanService.service
	echo "Created service Symlink for $SERVICE attempting start..."
fi


sudo systemctl restart FanService.service
if [ $? -ne 0 ];then
	echo "Failed to restart service FanService.service"
	exit 1
fi

read -p "Create \"temp\" alias to list temp at: ~/.bashrc? [Y/n]" -n 1 -r
echo
echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
	echo "alias temp=\"sudo systemctl status FanService.service | tail -n 1\"" >> ~/.bashrc
fi
exit 0


